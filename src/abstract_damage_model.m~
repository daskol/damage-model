function [model] = abstract_damage_model(prob)
%   ABSTRACT_DAMAGE_MODEL Construct abstract damage model to customize
%   it later and to make a simulation.
    model = struct();
    model = class(model);
    model.size = [];                % size of lattice along each dimension
    model.dim = 0;                  % lattice dimension
    model.lattice = [];             % lattice
    model.prob = prob;              % probability model
    model.set_lattice = @set_lattice;
    model.set_size = @set_wsize
    model.is_damaged = @is_damaged;
    model.damage = @damage;
    model.visualize = @visualize;
    model.simulate = @simulate;

    function [] = set_lattice(lattice)
        model.lattice = lattice;
    end

    function [] = set_size(size)
        model.size = size;
    end

    function [] = set_dim(dim)
        model.dim = dim;
    end
    
    function [damaged] = is_damaged()
%       IS_DAMAGE Check wether model was percolated.
        fprintf('abstract_damage_model\\is_damaged()\n');
        damaged = 1;
    end

    function [] = damage()
%       DAMAGE Make one step of percolation.
        I = model.lattice == 0;
        maxi = numel(I);
        index = randi(maxi);
        model.lattice(I(index)) = 0;
        model.prob.take(1.5);
    end

    function [] = visualize()
%       VISUALIZE Visualize model's data.
    end

    function [result] = simulate()
%       SIMULATE Simulate a phase transition(percolation).
        fprintf('abstract_damage_model\\simulate()\n');
        while ~model.is_damaged()
            model.damage();
        end
        result = model;
    end
end
